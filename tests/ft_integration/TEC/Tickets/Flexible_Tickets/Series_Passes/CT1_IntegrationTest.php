<?php

namespace TEC\Tickets\Flexible_Tickets\Series_Passes;

use TEC\Common\Tests\Provider\Controller_Test_Case;
use TEC\Events_Pro\Custom_Tables\V1\Models\Series_Relationship;
use TEC\Events_Pro\Custom_Tables\V1\Series\Autogenerated_Series;
use TEC\Events_Pro\Custom_Tables\V1\Series\Post_Type as Series_Post_Type;
use TEC\Tickets\Flexible_Tickets\Test\Traits\Series_Pass_Factory;

class CT1_IntegrationTest extends Controller_Test_Case {
	use Series_Pass_Factory;

	protected $controller_class = CT1_Integration::class;

	/**
	 * @before
	 */
	public function ensure_series_ticketables(): void {
		$ticketable_post_types   = (array) tribe_get_option( 'ticket-enabled-post-types', [] );
		$ticketable_post_types[] = Series_Post_Type::POSTTYPE;
		tribe_update_option( 'ticket-enabled-post-types', $ticketable_post_types );
	}

	/**
	 * It should not flag Series as manually edited when adding tickets to it by default
	 *
	 * @test
	 */
	public function should_not_flag_series_as_manually_edited_when_adding_tickets_to_it_by_default(): void {
		$event_id  = tribe_events()->set_args( [
			'title'      => 'Test Event',
			'start_date' => '2020-01-01 00:00:00',
			'end_date'   => '2020-01-01 00:00:00',
			'recurrence' => 'RRULE:FREQ=DAILY;COUNT=2',
		] )->create()->ID;
		$series_id = Series_Relationship::where( 'event_post_id', '=', $event_id )->first()->series_post_id;

		$this->assertTrue( (bool) get_post_meta( $series_id, Autogenerated_Series::FLAG_META_KEY, true ) );

		$this->create_tc_series_pass( $series_id, 23 );

		$this->assertTrue( (bool) get_post_meta( $series_id, Autogenerated_Series::FLAG_META_KEY, true ) );
	}

	/**
	 * It should flag Series as manually edited when adding tickets to it
	 *
	 * @test
	 */
	public function should_flag_series_as_manually_edited_when_adding_tickets_to_it(): void {
		$event_id  = tribe_events()->set_args( [
			'title'      => 'Test Event',
			'start_date' => '2020-01-01 00:00:00',
			'end_date'   => '2020-01-01 00:00:00',
			'recurrence' => 'RRULE:FREQ=DAILY;COUNT=2',
		] )->create()->ID;
		$series_id = Series_Relationship::where( 'event_post_id', '=', $event_id )->first()->series_post_id;

		$this->assertTrue( (bool) get_post_meta( $series_id, Autogenerated_Series::FLAG_META_KEY, true ) );

		// Register the controller to track the addition of a ticket to a Series and remove the flag.
		$this->make_controller()->register();

		$this->create_tc_series_pass( $series_id, 23 );

		$this->assertFalse( (bool) get_post_meta( $series_id, Autogenerated_Series::FLAG_META_KEY, true ) );
	}
}
